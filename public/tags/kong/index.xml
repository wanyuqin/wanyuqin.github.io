<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kong on My New Hugo Site</title>
    <link>http://localhost:1313/tags/kong/</link>
    <description>Recent content in Kong on My New Hugo Site</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1313/tags/kong/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kong自定义插件初体验</title>
      <link>http://localhost:1313/kong%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8F%92%E4%BB%B6%E5%88%9D%E4%BD%93%E9%AA%8C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/kong%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8F%92%E4%BB%B6%E5%88%9D%E4%BD%93%E9%AA%8C/</guid>
      <description>&lt;p&gt;此文章记录一下Kong自定义插件初次编写的过程，如果文章中有错误请及时提醒并帮忙更正&lt;/p&gt;&#xA;&lt;h2 id=&#34;安装开发环境&#34;&gt;安装开发环境&lt;/h2&gt;&#xA;&lt;p&gt;这里使用&lt;a href=&#34;https://github.com/Kong/kong-pongo&#34;&gt;Pongo&lt;/a&gt; 来进行插件的测试，而Pongo的使用需要具备docker-compose和curl，再这些都具备之后就可以安装Pongo CLI了&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$PATH:~/.local/bin&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone https://github.com/Kong/kong-pongo.git&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkdir -p ~/.local/bin&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ln -s &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;realpath kong-pongo/pongo.sh&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; ~/.local/bin/pongo&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;参考插件模版&#34;&gt;参考插件模版&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Kong/kong-plugin&#34;&gt;kong-plugin&lt;/a&gt; 为我们提供了一个简单的插件模版，这个模版使用的是Lua语言进行的开发&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-sehll&#34; data-lang=&#34;sehll&#34;&gt;git clone https://github.com/Kong/kong-plugin.git kong-api-version-plugin&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;打开这个项目&#xA;&lt;img src=&#34;https://img.ethanleo.top/20220509224116_afCtHi_703295BE-436A-40FC-B850-3D4AEAA96DBA.png&#34; alt=&#34;enter image description here&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;目录结构&#34;&gt;目录结构&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;kong/plugins 插件内容主要存放的目录，plugins下面的每个文件夹都表示一个功能插件&lt;/li&gt;&#xA;&lt;li&gt;spec 测试文件存放的目录&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;这里我把原来的文件名以及插件名称修改成了api-version，再修改完成之后我们可以执行一下 &lt;code&gt; pongo run&lt;/code&gt; ,此命令会将spec目录下的测试方法全部执行一遍，以保证我们的插件编写无误，同时&lt;code&gt;pongo run&lt;/code&gt;会将我们的插件进行加载。&lt;/p&gt;&#xA;&lt;p&gt;在我们的测试通过之后，我们就可以先尝试对kong进行插件安装了，我们执行 &lt;code&gt;pongo shell&lt;/code&gt;&#x9;进入到pongo的控制台，初始化kong的表，并且启动kong&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kong migrations bootstrap --force&#xA;kong start&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;再启动完kong之后，我们进行验证 执行&lt;code&gt;curl -i http://localhost:8000/&lt;/code&gt;,如果你看到返回了一个错误，并且错误信息是&lt;code&gt;{&amp;quot;message&amp;quot;:&amp;quot;no Route matched with those values&amp;quot;}&lt;/code&gt;,说明kong是正常启动的&lt;/p&gt;&#xA;&lt;h2 id=&#34;测试插件&#34;&gt;测试插件&lt;/h2&gt;&#xA;&lt;p&gt;在进行插件测试之前，我们需要添加一个kong的服务，这里的话用kong`s Admin API 去进行操作&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;curl -i -X POST \&#xA; --url http://localhost:8001/services/ \&#xA; --data &amp;#39;name=example-service&amp;#39; \&#xA; --data &amp;#39;url=http://konghq.com&amp;#39;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在添加完service之后，我们需要添加一个route，这样kong就可以进行代理我们的请求&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
