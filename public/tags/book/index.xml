<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Book on My New Hugo Site</title>
    <link>http://localhost:1313/tags/book/</link>
    <description>Recent content in Book on My New Hugo Site</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1313/tags/book/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>代码和项目结构</title>
      <link>http://localhost:1313/100_go_mistack/%E4%BB%A3%E7%A0%81%E5%92%8C%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/100_go_mistack/%E4%BB%A3%E7%A0%81%E5%92%8C%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84/</guid>
      <description>&lt;h1 id=&#34;代码和项目结构&#34;&gt;代码和项目结构&lt;/h1&gt;&#xA;&lt;p&gt;本章包含&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;确定代码风格&lt;/li&gt;&#xA;&lt;li&gt;有效的使用接口和泛型&lt;/li&gt;&#xA;&lt;li&gt;构建项目的最佳实践&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>字符串</title>
      <link>http://localhost:1313/100_go_mistack/%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/100_go_mistack/%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>&lt;h1 id=&#34;字符串&#34;&gt;字符串&lt;/h1&gt;&#xA;&lt;p&gt;​&#x9;在Go中，字符串是一种不可变的数据结构，包含一下内容：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;字符串指向不可变的byte数组&lt;/li&gt;&#xA;&lt;li&gt;byte数组总长度&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;StringHeader&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;Data&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;uintptr&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;Len&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;​&#x9;我们将在本章节中看到Go有一种非常独特的方式来处理字符串。Go中映入了一种叫做&lt;code&gt;runes&lt;/code&gt;的概念，这个概念对于理解字符串时必不可少的，对于新手来说可能会感到困惑。一旦我们知道了字符串时如何管理的，我们就可以在迭代字符串时避免常见的错误。我们还将研究Go开发人员在使用或生成字符串时常犯的错误。此外，我们会看到有时候我们可以直接使用&lt;code&gt;[]byte&lt;/code&gt;，避免额外的分配。最后，我们将讨论如何避免可能导致子字符串泄漏的常见错误。本章主要目标是通过展示常见的字符串错误来帮助你理解字符串在Go中的工作原理&lt;/p&gt;&#xA;&lt;h2 id=&#34;不理解rune的概念&#34;&gt;不理解rune的概念&lt;/h2&gt;&#xA;&lt;p&gt;​&#x9;如果不讨论Go中rune的概念，我们就无法开始字符串这一章。正如你将在一下部分中看到的那样，这个概念时彻底理解字符串处理方式和避免常见错误的关键。但在深入研究Go的&#x9;&lt;code&gt;rune&lt;/code&gt;之前，我们确保我们对一些基本的编程概念保持一致。&lt;/p&gt;&#xA;&lt;p&gt;​&#x9;我们应该理解字符集和编码之间的区别：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;字符集是一组字符，例如，Unicode字符集包含2^21个字符&lt;/li&gt;&#xA;&lt;li&gt;编码是字符列表的二进制转换。例如，UTF-8是一种编码标准，能够将所有Unicode字符编码为可变字节数（从1到4字节）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;​&#x9;我们提到字符是为了简化字符集定义。但在Unicode中，我们使用代码点的概念来代指由单个值表示的项目。例如，中文字符&lt;code&gt;汉&lt;/code&gt;由U+6C49代码点表示。使用UTF-8,&lt;code&gt;汉&lt;/code&gt;使用三个字节编码：0xE6、0xB1和0x89。为什么这个很重要？因为在Go中，&lt;code&gt;rune&lt;/code&gt;是一个Unicode代码点。&lt;/p&gt;&#xA;&lt;p&gt;​&#x9;同时，我们提到 UTF-8 将字符编码为 1 到 4 个字节，因此最多为 32 位。 这就是为什么在 Go 中，&lt;code&gt;rune&lt;/code&gt;是 int32 的别名&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;rune&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;int32&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;​&#x9;关于 UTF-8 需要强调的另一件事：有些人认为 Go 字符串始终是 UTF-8，但事实并非如此。 让我们考虑以下示例:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;​&#x9;我们将字符串文字（字符串常量）分配给 s。 在 Go 中，源代码以 UTF-8 编码。 因此，所有字符串文字都使用 UTF-8 编码为字节序列。 然而，字符串是任意字节的序列； 它不一定基于 UTF-8。 因此，当我们操作一个不是从字符串文字初始化的变量时（例如，从文件系统读取），我们不一定会假设它使用 UTF-8 编码.&lt;/p&gt;&#xA;&lt;p&gt;​&#x9;让我们回到 hello 的例子。 我们有一个由五个字符组成的字符串：h、e、l、l 和 o&lt;/p&gt;</description>
    </item>
    <item>
      <title>控制结构</title>
      <link>http://localhost:1313/100_go_mistack/%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/100_go_mistack/%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/</guid>
      <description>&lt;h1 id=&#34;控制结构&#34;&gt;控制结构&lt;/h1&gt;&#xA;&lt;p&gt;​&#x9;Go中的控制结构类似于C或Java中的控制结构，但是在其他方面他们不同。例如：Go中没有do或while循环，只有一个广义的for。本章深入探讨与控制结构相关的最常见错误。重点关注&lt;code&gt;range&lt;/code&gt;循环。这是错误最常见的来源&lt;/p&gt;</description>
    </item>
    <item>
      <title>数据类型</title>
      <link>http://localhost:1313/100_go_mistack/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/100_go_mistack/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>&lt;h1 id=&#34;数据类型&#34;&gt;数据类型&lt;/h1&gt;&#xA;&lt;p&gt;​&#x9;处理数据类型是软件工程师经常要进行的操作。本章深入探讨与基本类型、切片和映射相关的最常见错误。我们省略的唯一数据类型是字符串，因为后面的章节专门讨论这种类型。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
