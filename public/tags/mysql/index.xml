<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mysql on My New Hugo Site</title>
    <link>http://localhost:1313/tags/mysql/</link>
    <description>Recent content in Mysql on My New Hugo Site</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1313/tags/mysql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Mysql锁</title>
      <link>http://localhost:1313/mysql%E9%94%81/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/mysql%E9%94%81/</guid>
      <description>&lt;h1 id=&#34;mysql锁&#34;&gt;MySql锁&lt;/h1&gt;&#xA;&lt;h2 id=&#34;innodb中的锁&#34;&gt;InnoDB中的锁&lt;/h2&gt;&#xA;&lt;h3 id=&#34;锁的类型&#34;&gt;锁的类型&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;共享锁(S Lock)允许事务读一行数据&lt;/li&gt;&#xA;&lt;li&gt;排他锁 (X Lock)允许事务删除或更新一行数据&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;X&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;S&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;X&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;不兼容&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;不兼容&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;S&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;不兼容&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;兼容&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;h3 id=&#34;意向锁&#34;&gt;意向锁&lt;/h3&gt;&#xA;&lt;p&gt;InnoDB支持多粒度的锁定，这种锁定允许事务在行级上的锁和表级上的锁同时存在，为了支持不同粒度上进行加锁，InnoDB支持一种额外的锁的方式，&lt;strong&gt;意向锁&lt;/strong&gt;。意向锁会把锁定的对象分成多个层次，意向锁意味着事务希望在更细粒度上进行加锁。&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;把上锁对象看成树，如果要对页上的记录r进行上X锁，那么分别需要对数据库A、表、页上意向锁IX，最后记录r上X锁，如果其中任何一个部分导致等待，那么该操作需要等待粗粒度锁的完成。比如说对r记录加x锁之前，已经有一个事务对表1进行了S表锁，那么之后的事务要对记录r在表1上加上IX，必须要等待表锁操作完成&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;意向共享锁(IS Lock)，事务想要获得一张表里的某几行的共享锁&lt;/li&gt;&#xA;&lt;li&gt;意向排他锁(IX Lock)，事务要想获得一张表里的某几行的排他锁&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;IS&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;IX&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;S&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;X&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;IS&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;兼容&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;兼容&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;兼容&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;不兼容&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;IX&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;兼容&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;兼容&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;不兼容&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;不兼容&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;S&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;兼容&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;不兼容&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;兼容&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;不兼容&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;X&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;不兼容&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;不兼容&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;不兼容&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;不兼容&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;一致性非锁定读&#34;&gt;一致性非锁定读&lt;/h3&gt;&#xA;&lt;p&gt;一致性非锁定读是指InnoDB通过行多版本控制的方式来读取当前执行时间数据库中的行数据。如果读取的行数据正在进行DELETE或UPDATE操作，这个时候读取操作不会等待行上锁的释放。相反的InnoDB会去读取行数据的一个快照数据。快照数据是指，改行之前版本的数据，一个行的记录可能会存在多个版本的快照数据，这样的多版本技术就是MVCC(Multi Version Concurrency Control)是通过undo段来完成的，而undo段数据使用来进行事务回滚的,所以不会有额外的开销。&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;在事务隔离级别READ COMMITED和REPETABLE READ中，Innodb采用一致性非锁定读，但是在这两个隔离级别下，读取的数据版本并不是一样的。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
