<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>日常学习 on Ethan_Gogo</title>
    <link>http://localhost:1313/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/</link>
    <description>Recent content in 日常学习 on Ethan_Gogo</description>
    <generator>Hugo -- 0.134.3</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1313/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GMP模型</title>
      <link>http://localhost:1313/golang%E7%9A%84gmp%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/golang%E7%9A%84gmp%E6%A8%A1%E5%9E%8B/</guid>
      <description>&lt;h1 id=&#34;golang的gmp模型&#34;&gt;Golang的GMP模型&lt;/h1&gt;
&lt;h3 id=&#34;golang对协程的处理&#34;&gt;Golang对协程的处理&lt;/h3&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://img.ethanleo.top/uPic/image-20220824200321748.png&#34; alt=&#34;image-20220824200321748&#34;  /&gt;
&lt;/p&gt;</description>
    </item>
    <item>
      <title>go context的基本使用</title>
      <link>http://localhost:1313/go-context%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/go-context%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;h1 id=&#34;go-context的基本使用&#34;&gt;Go Context的基本使用&lt;/h1&gt;
&lt;p&gt;此文章主要是用来介绍一下golang里面context的使用，因为之前一直不太清楚context的用法，以及context的一些基本特性。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go语言学习</title>
      <link>http://localhost:1313/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/</guid>
      <description>&lt;p&gt;3 个环境变量，也就是 GOROOT、GOPATH 和 GOBIN。这里我可以简单介绍一下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GOROOT：Go 语言安装根目录的路径，也就是 GO 语言的安装路径。&lt;/li&gt;
&lt;li&gt;GOPATH：若干工作区目录的路径。是我们自己定义的工作空间。&lt;/li&gt;
&lt;li&gt;GOBIN：GO 程序生成的可执行文件（executable file）的路径。&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;go-build-命令一些可选项的用途和用法&#34;&gt;go build 命令一些可选项的用途和用法&lt;/h2&gt;
&lt;p&gt;在运行&lt;code&gt;go build&lt;/code&gt;命令的时候，默认不会编译目标代码包所依赖的那些代码包。当然，如果被依赖的代码包的归档文件不存在，或者源码文件有了变化，那它还是会被编译。&lt;/p&gt;
&lt;p&gt;如果要强制编译它们，可以在执行命令的时候加入标记&lt;code&gt;-a&lt;/code&gt;。此时，不但目标代码包总是会被编译，它依赖的代码包也总会被编译，即使依赖的是标准库中的代码包也是如此。&lt;/p&gt;
&lt;p&gt;另外，如果不但要编译依赖的代码包，还要安装它们的归档文件，那么可以加入标记&lt;code&gt;-i&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;那么我们怎么确定哪些代码包被编译了呢？有两种方法。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;运行&lt;code&gt;go build&lt;/code&gt;命令时加入标记&lt;code&gt;-x&lt;/code&gt;，这样可以看到&lt;code&gt;go build&lt;/code&gt;命令具体都执行了哪些操作。另外也可以加入标记&lt;code&gt;-n&lt;/code&gt;，这样可以只查看具体操作而不执行它们。&lt;/li&gt;
&lt;li&gt;运行&lt;code&gt;go build&lt;/code&gt;命令时加入标记&lt;code&gt;-v&lt;/code&gt;，这样可以看到&lt;code&gt;go build&lt;/code&gt;命令编译的代码包的名称。它在与&lt;code&gt;-a&lt;/code&gt;标记搭配使用时很有用。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面再说一说与 Go 源码的安装联系很紧密的一个命令：&lt;code&gt;go get&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;命令&lt;code&gt;go get&lt;/code&gt;会自动从一些主流公用代码仓库（比如 GitHub）下载目标代码包，并把它们安装到环境变量&lt;code&gt;GOPATH&lt;/code&gt;包含的第 1 工作区的相应目录中。如果存在环境变量&lt;code&gt;GOBIN&lt;/code&gt;，那么仅包含命令源码文件的代码包会被安装到&lt;code&gt;GOBIN&lt;/code&gt;指向的那个目录。&lt;/p&gt;
&lt;p&gt;最常用的几个标记有下面几种。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-u&lt;/code&gt;：下载并安装代码包，不论工作区中是否已存在它们。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-d&lt;/code&gt;：只下载代码包，不安装代码包。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-fix&lt;/code&gt;：在下载代码包后先运行一个用于根据当前 Go 语言版本修正代码的工具，然后再安装代码包。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-t&lt;/code&gt;：同时下载测试所需的代码包。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-insecure&lt;/code&gt;：允许通过非安全的网络协议下载和安装代码包。HTTP 就是这样的协议。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go 语言官方提供的&lt;code&gt;go get&lt;/code&gt;命令是比较基础的，其中并没有提供依赖管理的功能。目前 GitHub 上有很多提供这类功能的第三方工具，比如&lt;code&gt;glide&lt;/code&gt;、&lt;code&gt;gb&lt;/code&gt;以及官方出品的&lt;code&gt;dep&lt;/code&gt;、&lt;code&gt;vgo&lt;/code&gt;等等，它们在内部大都会直接使用&lt;code&gt;go get&lt;/code&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>IO多路复用</title>
      <link>http://localhost:1313/io%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/io%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/</guid>
      <description>&lt;h1 id=&#34;io多路复用&#34;&gt;IO多路复用&lt;/h1&gt;
&lt;p&gt;同一时刻，一个线程(进程)监听多个IO请求&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kong自定义插件初体验</title>
      <link>http://localhost:1313/kong%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8F%92%E4%BB%B6%E5%88%9D%E4%BD%93%E9%AA%8C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/kong%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8F%92%E4%BB%B6%E5%88%9D%E4%BD%93%E9%AA%8C/</guid>
      <description>&lt;p&gt;此文章记录一下Kong自定义插件初次编写的过程，如果文章中有错误请及时提醒并帮忙更正&lt;/p&gt;
&lt;h2 id=&#34;安装开发环境&#34;&gt;安装开发环境&lt;/h2&gt;
&lt;p&gt;这里使用&lt;a href=&#34;https://github.com/Kong/kong-pongo&#34;&gt;Pongo&lt;/a&gt; 来进行插件的测试，而Pongo的使用需要具备docker-compose和curl，再这些都具备之后就可以安装Pongo CLI了&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$PATH:~/.local/bin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone https://github.com/Kong/kong-pongo.git
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkdir -p ~/.local/bin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ln -s &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;realpath kong-pongo/pongo.sh&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; ~/.local/bin/pongo
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;参考插件模版&#34;&gt;参考插件模版&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Kong/kong-plugin&#34;&gt;kong-plugin&lt;/a&gt; 为我们提供了一个简单的插件模版，这个模版使用的是Lua语言进行的开发&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-sehll&#34; data-lang=&#34;sehll&#34;&gt;git clone https://github.com/Kong/kong-plugin.git kong-api-version-plugin
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;打开这个项目
&lt;img loading=&#34;lazy&#34; src=&#34;https://img.ethanleo.top/20220509224116_afCtHi_703295BE-436A-40FC-B850-3D4AEAA96DBA.png&#34; alt=&#34;enter image description here&#34;  /&gt;
&lt;/p&gt;
&lt;h3 id=&#34;目录结构&#34;&gt;目录结构&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;kong/plugins 插件内容主要存放的目录，plugins下面的每个文件夹都表示一个功能插件&lt;/li&gt;
&lt;li&gt;spec 测试文件存放的目录&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里我把原来的文件名以及插件名称修改成了api-version，再修改完成之后我们可以执行一下 &lt;code&gt; pongo run&lt;/code&gt; ,此命令会将spec目录下的测试方法全部执行一遍，以保证我们的插件编写无误，同时&lt;code&gt;pongo run&lt;/code&gt;会将我们的插件进行加载。&lt;/p&gt;
&lt;p&gt;在我们的测试通过之后，我们就可以先尝试对kong进行插件安装了，我们执行 &lt;code&gt;pongo shell&lt;/code&gt;	进入到pongo的控制台，初始化kong的表，并且启动kong&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kong migrations bootstrap --force
kong start
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;再启动完kong之后，我们进行验证 执行&lt;code&gt;curl -i http://localhost:8000/&lt;/code&gt;,如果你看到返回了一个错误，并且错误信息是&lt;code&gt;{&amp;quot;message&amp;quot;:&amp;quot;no Route matched with those values&amp;quot;}&lt;/code&gt;,说明kong是正常启动的&lt;/p&gt;
&lt;h2 id=&#34;测试插件&#34;&gt;测试插件&lt;/h2&gt;
&lt;p&gt;在进行插件测试之前，我们需要添加一个kong的服务，这里的话用kong`s Admin API 去进行操作&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;curl -i -X POST \
 --url http://localhost:8001/services/ \
 --data &amp;#39;name=example-service&amp;#39; \
 --data &amp;#39;url=http://konghq.com&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在添加完service之后，我们需要添加一个route，这样kong就可以进行代理我们的请求&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mysql锁</title>
      <link>http://localhost:1313/mysql%E9%94%81/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/mysql%E9%94%81/</guid>
      <description>&lt;h1 id=&#34;mysql锁&#34;&gt;MySql锁&lt;/h1&gt;
&lt;h2 id=&#34;innodb中的锁&#34;&gt;InnoDB中的锁&lt;/h2&gt;
&lt;h3 id=&#34;锁的类型&#34;&gt;锁的类型&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;共享锁(S Lock)允许事务读一行数据&lt;/li&gt;
&lt;li&gt;排他锁 (X Lock)允许事务删除或更新一行数据&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;X&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;S&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;X&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;不兼容&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;不兼容&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;S&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;不兼容&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;兼容&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h3 id=&#34;意向锁&#34;&gt;意向锁&lt;/h3&gt;
&lt;p&gt;InnoDB支持多粒度的锁定，这种锁定允许事务在行级上的锁和表级上的锁同时存在，为了支持不同粒度上进行加锁，InnoDB支持一种额外的锁的方式，&lt;strong&gt;意向锁&lt;/strong&gt;。意向锁会把锁定的对象分成多个层次，意向锁意味着事务希望在更细粒度上进行加锁。&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;把上锁对象看成树，如果要对页上的记录r进行上X锁，那么分别需要对数据库A、表、页上意向锁IX，最后记录r上X锁，如果其中任何一个部分导致等待，那么该操作需要等待粗粒度锁的完成。比如说对r记录加x锁之前，已经有一个事务对表1进行了S表锁，那么之后的事务要对记录r在表1上加上IX，必须要等待表锁操作完成&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;意向共享锁(IS Lock)，事务想要获得一张表里的某几行的共享锁&lt;/li&gt;
&lt;li&gt;意向排他锁(IX Lock)，事务要想获得一张表里的某几行的排他锁&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;IS&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;IX&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;S&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;X&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;IS&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;兼容&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;兼容&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;兼容&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;不兼容&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;IX&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;兼容&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;兼容&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;不兼容&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;不兼容&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;S&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;兼容&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;不兼容&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;兼容&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;不兼容&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;X&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;不兼容&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;不兼容&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;不兼容&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;不兼容&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;一致性非锁定读&#34;&gt;一致性非锁定读&lt;/h3&gt;
&lt;p&gt;一致性非锁定读是指InnoDB通过行多版本控制的方式来读取当前执行时间数据库中的行数据。如果读取的行数据正在进行DELETE或UPDATE操作，这个时候读取操作不会等待行上锁的释放。相反的InnoDB会去读取行数据的一个快照数据。快照数据是指，改行之前版本的数据，一个行的记录可能会存在多个版本的快照数据，这样的多版本技术就是MVCC(Multi Version Concurrency Control)是通过undo段来完成的，而undo段数据使用来进行事务回滚的,所以不会有额外的开销。&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;在事务隔离级别READ COMMITED和REPETABLE READ中，Innodb采用一致性非锁定读，但是在这两个隔离级别下，读取的数据版本并不是一样的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>RabbitMQ学习笔记</title>
      <link>http://localhost:1313/rabbitmq%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/rabbitmq%E5%AD%A6%E4%B9%A0/</guid>
      <description>&lt;h2 id=&#34;linux下一些rabbitmq的命令&#34;&gt;Linux下一些rabbitmq的命令&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;systemctl start    rabbitmq-server   &lt;span style=&#34;color:#75715e&#34;&gt;#启动&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;systemctl restart  rabbitmq-server   &lt;span style=&#34;color:#75715e&#34;&gt;#重启&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;systemctl stop     rabbitmq-server   &lt;span style=&#34;color:#75715e&#34;&gt;#停止&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;systemctl status   rabbitmq-server   &lt;span style=&#34;color:#75715e&#34;&gt;#查看状态&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rabbitmqctl list_users            &lt;span style=&#34;color:#75715e&#34;&gt;#查看用户&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rabbitmqctl list_queues           &lt;span style=&#34;color:#75715e&#34;&gt;#查看队列&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rabbitmqctl status                &lt;span style=&#34;color:#75715e&#34;&gt;#查看borker状态&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rabbitmqctl purget_queue 队列名称  &lt;span style=&#34;color:#75715e&#34;&gt;#删除指定队列中数据&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rabbitmqctl delete_queue 队列名称  &lt;span style=&#34;color:#75715e&#34;&gt;#删除指定队列&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rabbitmqctl help                  &lt;span style=&#34;color:#75715e&#34;&gt;#帮助命令&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rabbitmqctl add_user root root   &lt;span style=&#34;color:#75715e&#34;&gt;#添加用户 username password&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rabbitmqctl set_permissions -p / root &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.*&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.*&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.*&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;#给root设置全部权限&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rabbitmqctl set_user_tags root administrator &lt;span style=&#34;color:#75715e&#34;&gt;#给root设置管理员角色&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rabbitmqctl list_queues name messages_ready &lt;span style=&#34;color:#75715e&#34;&gt;#查看ready 消息&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rabbitmq-plugins list    &lt;span style=&#34;color:#75715e&#34;&gt;#查看插件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rabbitmq-plugins enable  &lt;span style=&#34;color:#75715e&#34;&gt;#启动插件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rabbitmq-plugins disable &lt;span style=&#34;color:#75715e&#34;&gt;#停止插件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rabbitmq-plugins help    &lt;span style=&#34;color:#75715e&#34;&gt;#帮助命令 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;rabbitmq运转流程&#34;&gt;RabbitMq运转流程&lt;/h2&gt;
&lt;h3 id=&#34;生产者&#34;&gt;生产者&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;连接到一个RabbitMQ Broker 建立一个连接，开通一个信道&lt;/li&gt;
&lt;li&gt;声明一个交换器，并设置相关属性，比如交换机的类型、是否持久化等&lt;/li&gt;
&lt;li&gt;声明一个队列并设置相关的属性，是否排他、是否持久化、是否自动删除等&lt;/li&gt;
&lt;li&gt;通过路由键将交换机和队列绑定&lt;/li&gt;
&lt;li&gt;生产者发送消息到RabbitMQ Broker 其中包含路由键、交换机等信息&lt;/li&gt;
&lt;li&gt;相应的交换机根据路由键查找相匹配的队列&lt;/li&gt;
&lt;li&gt;如果没有找到，则更具生产者配置属性选择丢弃或者回退给生产者&lt;/li&gt;
&lt;li&gt;关闭信道&lt;/li&gt;
&lt;li&gt;关闭连接&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;消费者&#34;&gt;消费者&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;连接到一个RabbitMQ Broker 建立一个连接，开通一个信道&lt;/li&gt;
&lt;li&gt;向RabbitMQ Broker请求消费相应队列中的消息，可能会设置相应的回调函数&lt;/li&gt;
&lt;li&gt;等待RabbitMQ Broker 回应并投递相应队列中的消息，消费者接受消息&lt;/li&gt;
&lt;li&gt;消费者确认（ACK）接受到的消息&lt;/li&gt;
&lt;li&gt;RabbitMQ 从队列中删除相应已经确认的消息&lt;/li&gt;
&lt;li&gt;关闭信道&lt;/li&gt;
&lt;li&gt;关闭连接&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;信道是建立在Connection之上的虚拟连接，RabbitMQ处理每条AMQP指令都是通过信道来完成的&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
